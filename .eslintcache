[{"/home/bryan/sei/projects/sorting-visualizer/src/index.js":"1","/home/bryan/sei/projects/sorting-visualizer/src/App.js":"2","/home/bryan/sei/projects/sorting-visualizer/src/components/Graph.js":"3","/home/bryan/sei/projects/sorting-visualizer/src/components/Row.js":"4","/home/bryan/sei/projects/sorting-visualizer/src/components/GraphClassComponent.js":"5"},{"size":197,"mtime":1608442708526,"results":"6","hashOfConfig":"7"},{"size":223,"mtime":1608702386519,"results":"8","hashOfConfig":"7"},{"size":2926,"mtime":1608455642846,"results":"9","hashOfConfig":"7"},{"size":410,"mtime":1608702234036,"results":"10","hashOfConfig":"7"},{"size":3581,"mtime":1609211519475,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"12hzbdm",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"14"},"/home/bryan/sei/projects/sorting-visualizer/src/index.js",[],["26","27"],"/home/bryan/sei/projects/sorting-visualizer/src/App.js",[],"/home/bryan/sei/projects/sorting-visualizer/src/components/Graph.js",["28"],"import React, { useEffect, useState } from 'react';\nimport Row from './Row';\n\nfunction isNumber(n) { return /^-?[\\d.]+(?:e-?\\d+)?$/.test(n); }\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst Graph = () => {\n\n\n    const [input, setInput] = useState(\"\");//Tracking the input of the user\n    const [change, setChange] = useState(true);// Checks for change in array if there is a change it will trigger to rerender rows \n    const [arrOfNums, setArrOfNums] = useState([]);// Integer Holder of all numbers\n    const [rows, setRows] = useState([]);//Component holder for all of my row components\n    const [largestNum, setLargestNum] = useState(1);//Tracking the greatest number for the height of the rows\n\n\n    //This function is ran when we have a change in the \"change state\"\n    useEffect(()=>{\n        const newRows = arrOfNums.map((elem,index)=>{\n            return <Row key = {index} number={elem} largestNum={largestNum}/>\n        });\n        setRows(newRows);\n    },[change])\n    // useEffect(() => {\n    //     // Update the document title using the browser API\n    //     console.log(\"what the fuck\")\n    // });\n\n    const submitHandler = (e) =>{\n        //Prevents a rerender that would lose data info\n        e.preventDefault();\n\n        //Will Store Number\n        const number = parseInt(input);\n        if(isNumber(input)){//Checks if it is a number and if it is it adds it to the array\n            const newArr = arrOfNums;\n            newArr.push(number);\n            setArrOfNums(newArr);\n            setChange(!change);\n            if(number>largestNum){\n                setLargestNum(number);\n            }\n        }else{\n            console.log(\"That is not a number try again\")\n        }\n        setInput(\"\");\n    }\n\n    const inputHandler = (e) =>{\n        setInput(e.target.value)\n    }\n\n    const sorter = async() =>{\n        // await sleep(100);\n        let arr = arrOfNums;\n        var len = arr.length;\n        for (var i = len-1; i>=0; i--){\n            for(var j = 1; j<=i; j++){\n            await sleep(1000);\n            if(arr[j-1]>arr[j]){\n                var temp = arr[j-1];\n                arr[j-1] = arr[j];\n                arr[j] = temp;\n                console.log(\"yo\")\n                console.log(arr);\n                console.log(arrOfNums);\n                changeArr(arr);\n                }\n            }\n        }\n        console.log(\"Hello\");\n    }\n\n    const changeArr = (arr) =>{\n        setArrOfNums(arr);\n        setChange(!change);\n    }\n\n    return (\n        <div>\n            <form onSubmit={submitHandler}>\n                <input type=\"text\" value={input} onChange={inputHandler}/>\n                <input type=\"submit\" name=\"Submit\"/>\n            </form>\n            <div className=\"all_rows\">\n                {rows}\n            </div>\n            <button onClick={sorter}>Sort</button>\n        </div>\n    );\n}\n\n\nexport default Graph;\n",["29","30"],"/home/bryan/sei/projects/sorting-visualizer/src/components/Row.js",[],"/home/bryan/sei/projects/sorting-visualizer/src/components/GraphClassComponent.js",["31","32"],"import React, { Component } from 'react';\nimport Row from './Row';\n\nfunction isNumber(n) { return /^-?[\\d.]+(?:e-?\\d+)?$/.test(n); }\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\nclass GraphClassComponent extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            inputVal: '',\n            arrOfNums:[],\n            rows:[],\n            largestNum:1\n        }\n    }\n\n    componentDidMount(){\n        this.reset();\n    }\n\n    submitHandler = (e) =>{\n        e.preventDefault();\n        if(isNumber(this.state.inputVal)){\n            this.setState((prevState)=>{\n                const tempArr = prevState.arrOfNums.slice();\n                const number = parseInt(this.state.inputVal)\n                \n                let newLargest = 1;\n                if(number>prevState.largestNum){\n                    newLargest = number;\n                }else{\n                    newLargest = prevState.largestNum;\n                }\n                tempArr.push(number);\n                const newRows = tempArr.map((elem,index)=>{\n                    return <Row key = {index} number={elem} largestNum={newLargest} beingCompared = {false}/>\n                });\n\n                return {arrOfNums: tempArr, inputVal : \"\", rows: newRows, largestNum:newLargest}\n            })\n        }\n        this.setState({inputVal:\"\"})\n\n    }\n\n    quickSort = async() =>{\n\n        let arr = this.state.arrOfNums;\n        var len = arr.length;\n        for (let i = len-1; i>=0; i--){\n            for(let j = 1; j<=i; j++){\n                await sleep(10);\n                if(arr[j-1]>arr[j]){\n                    var temp = arr[j-1];\n                    arr[j-1] = arr[j];\n                    arr[j] = temp;\n                    console.log(\"yo\")\n                }\n                const newRows = arr.map((elem,index)=>{\n                    if((i==index)||(j==index)){\n                        return <Row key = {index} number={elem} largestNum={this.state.largestNum} beingCompared = {true}/>\n                    }else{\n                        return <Row key = {index} number={elem} largestNum={this.state.largestNum} beingCompared = {false}/>\n                    }\n                });\n                this.setState({rows:newRows,arrOfNums:arr})\n            }\n        }\n\n    }\n\n    reset = () =>{\n        const seedArr = [];\n        let largest = 1;\n        for(let i = 0; i< 20;i++){\n            const num = getRandomInt(100)+1;\n            if (num>largest) largest = num;\n            seedArr.push(num);\n        }\n        const newRows = seedArr.map((elem,index)=>{\n            return <Row key = {index} number={elem} largestNum={largest} beingCompared = {false}/>\n        });\n        this.setState({arrOfNums: seedArr, rows: newRows, largestNum:largest})\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.submitHandler}>\n                    <input type=\"text\" placeholder=\"Enter Number\" value={this.state.inputVal} onChange={(event)=> this.setState({ inputVal: event.target.value })}/>\n                    <input type=\"submit\" name=\"Submit\" value=\"Add Number\"/>\n                </form>\n                <button onClick={this.quickSort}>Bubble Sort</button>\n                <button onClick={this.reset}>Reset</button>\n                <div className=\"all_rows\">\n                    {this.state.rows}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default GraphClassComponent;\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":25,"column":7,"nodeType":"39","endLine":25,"endColumn":15,"suggestions":"40"},{"ruleId":"33","replacedBy":"41"},{"ruleId":"35","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":66,"column":26,"nodeType":"45","messageId":"46","endLine":66,"endColumn":28},{"ruleId":"43","severity":1,"message":"44","line":66,"column":38,"nodeType":"45","messageId":"46","endLine":66,"endColumn":40},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'arrOfNums' and 'largestNum'. Either include them or remove the dependency array.","ArrayExpression",["49"],["47"],["48"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [arrOfNums, change, largestNum]",{"range":"52","text":"53"},[1011,1019],"[arrOfNums, change, largestNum]"]