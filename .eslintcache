[{"/home/bryan/sei/projects/sorting-visualizer/src/index.js":"1","/home/bryan/sei/projects/sorting-visualizer/src/App.js":"2","/home/bryan/sei/projects/sorting-visualizer/src/components/Graph.js":"3","/home/bryan/sei/projects/sorting-visualizer/src/components/Row.js":"4","/home/bryan/sei/projects/sorting-visualizer/src/components/GraphClassComponent.js":"5","/home/bryan/sei/projects/sorting-visualizer/src/helper/index.js":"6"},{"size":197,"mtime":1608442708526,"results":"7","hashOfConfig":"8"},{"size":211,"mtime":1610329468704,"results":"9","hashOfConfig":"8"},{"size":2926,"mtime":1608455642846,"results":"10","hashOfConfig":"8"},{"size":410,"mtime":1610329557041,"results":"11","hashOfConfig":"8"},{"size":3459,"mtime":1610331325288,"results":"12","hashOfConfig":"8"},{"size":255,"mtime":1610330003179,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"12hzbdm",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/bryan/sei/projects/sorting-visualizer/src/index.js",[],["29","30"],"/home/bryan/sei/projects/sorting-visualizer/src/App.js",[],"/home/bryan/sei/projects/sorting-visualizer/src/components/Graph.js",["31"],"import React, { useEffect, useState } from 'react';\nimport Row from './Row';\n\nfunction isNumber(n) { return /^-?[\\d.]+(?:e-?\\d+)?$/.test(n); }\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst Graph = () => {\n\n\n    const [input, setInput] = useState(\"\");//Tracking the input of the user\n    const [change, setChange] = useState(true);// Checks for change in array if there is a change it will trigger to rerender rows \n    const [arrOfNums, setArrOfNums] = useState([]);// Integer Holder of all numbers\n    const [rows, setRows] = useState([]);//Component holder for all of my row components\n    const [largestNum, setLargestNum] = useState(1);//Tracking the greatest number for the height of the rows\n\n\n    //This function is ran when we have a change in the \"change state\"\n    useEffect(()=>{\n        const newRows = arrOfNums.map((elem,index)=>{\n            return <Row key = {index} number={elem} largestNum={largestNum}/>\n        });\n        setRows(newRows);\n    },[change])\n    // useEffect(() => {\n    //     // Update the document title using the browser API\n    //     console.log(\"what the fuck\")\n    // });\n\n    const submitHandler = (e) =>{\n        //Prevents a rerender that would lose data info\n        e.preventDefault();\n\n        //Will Store Number\n        const number = parseInt(input);\n        if(isNumber(input)){//Checks if it is a number and if it is it adds it to the array\n            const newArr = arrOfNums;\n            newArr.push(number);\n            setArrOfNums(newArr);\n            setChange(!change);\n            if(number>largestNum){\n                setLargestNum(number);\n            }\n        }else{\n            console.log(\"That is not a number try again\")\n        }\n        setInput(\"\");\n    }\n\n    const inputHandler = (e) =>{\n        setInput(e.target.value)\n    }\n\n    const sorter = async() =>{\n        // await sleep(100);\n        let arr = arrOfNums;\n        var len = arr.length;\n        for (var i = len-1; i>=0; i--){\n            for(var j = 1; j<=i; j++){\n            await sleep(1000);\n            if(arr[j-1]>arr[j]){\n                var temp = arr[j-1];\n                arr[j-1] = arr[j];\n                arr[j] = temp;\n                console.log(\"yo\")\n                console.log(arr);\n                console.log(arrOfNums);\n                changeArr(arr);\n                }\n            }\n        }\n        console.log(\"Hello\");\n    }\n\n    const changeArr = (arr) =>{\n        setArrOfNums(arr);\n        setChange(!change);\n    }\n\n    return (\n        <div>\n            <form onSubmit={submitHandler}>\n                <input type=\"text\" value={input} onChange={inputHandler}/>\n                <input type=\"submit\" name=\"Submit\"/>\n            </form>\n            <div className=\"all_rows\">\n                {rows}\n            </div>\n            <button onClick={sorter}>Sort</button>\n        </div>\n    );\n}\n\n\nexport default Graph;\n",["32","33"],"/home/bryan/sei/projects/sorting-visualizer/src/components/Row.js",[],"/home/bryan/sei/projects/sorting-visualizer/src/components/GraphClassComponent.js",["34","35"],"/home/bryan/sei/projects/sorting-visualizer/src/helper/index.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":25,"column":7,"nodeType":"42","endLine":25,"endColumn":15,"suggestions":"43"},{"ruleId":"36","replacedBy":"44"},{"ruleId":"38","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":59,"column":26,"nodeType":"48","messageId":"49","endLine":59,"endColumn":28},{"ruleId":"46","severity":1,"message":"47","line":59,"column":38,"nodeType":"48","messageId":"49","endLine":59,"endColumn":40},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'arrOfNums' and 'largestNum'. Either include them or remove the dependency array.","ArrayExpression",["52"],["50"],["51"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"53","fix":"54"},"Update the dependencies array to be: [arrOfNums, change, largestNum]",{"range":"55","text":"56"},[1011,1019],"[arrOfNums, change, largestNum]"]